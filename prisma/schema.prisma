datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username     String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  clubs    Club[]
  followings Followings[]
  followNotifications FollowNotification[]
}

model Followings {
  id        String   @id @default(cuid())
  userId    String
  following String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FollowNotification {
  id        String   @id @default(cuid())
  userId    String
  creatorId String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id             String   @id @default(cuid())
  userId         String
  name           String
  description    String
  schedule       String
  phone          String
  address        String
  latitude       Float
  longitude      Float
  courtsQuantity Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courts Court[] @relation("ClubCourt")

  @@map("clubs")
}

model Court {
  id          String   @id @default(cuid())
  name        String
  active      Boolean  @default(true)
  description String
  type        String
  surface     String
  lights      Boolean
  indoor      Boolean
  //booking     Booking[]
  clubId      String   @map("club_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade, name: "ClubCourt")

  @@map("courts")
}

// model Booking {
//   id          Int      @id @default(autoincrement())
//   date        DateTime
//   court       Court    @relation(fields: [courtId], references: [id])
//   courtId     Int
//   user        User     @relation(fields: [userId], references: [id])
//   userId      Int
//   createdAt   DateTime @default(now()) @map(name: "created_at")
//   updatedAt   DateTime @updatedAt @map(name: "updated_at")

//   @@map(name: "bookings")
// }
